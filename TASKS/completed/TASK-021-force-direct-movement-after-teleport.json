{
  "id": "TASK-021",
  "title": "Force direct movement for 3 seconds after teleport (bypass broken NavigationAgent3D)",
  "type": "bug_fix",
  "priority": "CRITICAL",
  "assigned_to": "project_manager",
  "status": "completed",
  "created": "2025-10-20T04:45:00Z",
  "completed": "2025-10-20T04:55:00Z",
  "estimated_hours": 0.25,
  "actual_hours": 0.17,
  "discovered_by": "User play testing",
  "description": "Navigation-based enemies STILL jitter after teleport despite all previous fixes (updated target, increased delay to 0.5s). RangedEnemy works perfectly because it uses direct movement. SOLUTION: Force ALL enemies to use direct movement for 3 seconds after teleporting, then switch back to navigation.",

  "bug_details": {
    "symptom": "Red/purple enemies still jitter after teleport",
    "user_feedback": "Still the same issue",
    "previous_attempts": [
      "TASK-019: Updated nav_agent.target_position after teleport - didn't fix jitter",
      "TASK-020: Increased delay to 0.5s for path recalc - didn't fix jitter"
    ],
    "severity": "CRITICAL - Navigation system fundamentally broken after teleport",
    "key_observation": "RangedEnemy works perfectly, uses direct movement"
  },

  "root_cause_analysis": {
    "fundamental_issue": "NavigationAgent3D enters an irrecoverably bad state after teleporting",
    "why_previous_fixes_failed": {
      "updated_target": "Updating nav_agent.target_position queues recalc but agent internal state still broken",
      "increased_delay": "Even waiting 0.5s doesn't fix NavigationAgent3D's internal state corruption",
      "godot_limitation": "NavigationAgent3D not designed to handle sudden position teleportation"
    },
    "why_ranged_works": "Uses handle_direct_movement() which has NO NavigationAgent3D dependency",
    "insight": "If direct movement works perfectly, why use NavigationAgent3D at all post-teleport?"
  },

  "solution_design": {
    "approach": "Temporarily switch to direct movement after teleporting, then switch back",
    "sequence": [
      "1. Enemy teleports to new position",
      "2. Set force_direct_movement = true for 3 seconds",
      "3. Enemy uses handle_direct_movement() (no NavigationAgent3D)",
      "4. After 3 seconds, switch back to navigation",
      "5. NavigationAgent3D has had time to fully reset and recalculate"
    ],
    "benefits": [
      "Completely bypasses broken NavigationAgent3D state",
      "Proven to work (RangedEnemy uses this approach)",
      "Clean, predictable behavior",
      "By 3 seconds post-teleport, NavigationAgent3D has stabilized"
    ]
  },

  "implementation": {
    "new_variables": {
      "force_direct_movement": "bool - flag to bypass navigation",
      "force_direct_movement_timer": "float - countdown timer",
      "force_direct_movement_duration": "float = 3.0 - use direct movement for 3s"
    },
    "new_function": {
      "name": "_update_force_direct_movement_timer",
      "lines": "152-158",
      "purpose": "Count down timer, switch back to navigation when expires"
    },
    "modified_process_enemy_behavior": {
      "line": 172,
      "change": "if move_speed >= 4.0 or force_direct_movement:",
      "logic": "Use direct movement for fast enemies OR when forced after teleport"
    },
    "modified_teleport": {
      "lines": "477-485",
      "changes": [
        "Set force_direct_movement = true",
        "Set timer to 3.0 seconds",
        "Use spawn delay (0.1s) instead of teleport delay (0.5s)"
      ],
      "why_spawn_delay": "Direct movement doesn't need NavigationServer, 0.1s enough"
    }
  },

  "technical_details": {
    "direct_movement_vs_navigation": {
      "direct_movement": {
        "calculation": "var direction = global_position.direction_to(target_player.global_position)",
        "every_frame": "Recalculates fresh direction to player",
        "no_state": "No cached paths, no NavigationAgent3D dependency",
        "obstacle_handling": "CharacterBody3D.move_and_slide() handles collision",
        "pathfinding": "None - walks straight at player, blocked by walls"
      },
      "navigation_movement": {
        "calculation": "nav_agent.get_next_path_position()",
        "cached_path": "Follows pre-calculated path from NavigationServer",
        "state_dependent": "Relies on NavigationAgent3D internal state being valid",
        "obstacle_handling": "Paths AROUND obstacles intelligently",
        "pathfinding": "Full A* pathfinding with obstacle avoidance"
      }
    },
    "why_3_seconds": {
      "reason_1": "Gives NavigationAgent3D plenty of time to fully reset state",
      "reason_2": "Enemy reaches player vicinity, ready to use proper pathfinding",
      "reason_3": "Long enough to avoid jitter, short enough to not feel broken",
      "tradeoff": "No complex pathfinding for 3s after teleport, but smooth movement"
    },
    "navigation_state_corruption": {
      "theory": "NavigationAgent3D caches internal state tied to old position",
      "teleport_breaks_it": "Sudden position change invalidates cached internal data",
      "update_target_insufficient": "Updating target_position only queues new path, doesn't reset state",
      "delay_insufficient": "Waiting doesn't reset state, just gives time for broken calc to finish",
      "only_solution": "Stop using NavigationAgent3D until it naturally resets"
    }
  },

  "code_changes": {
    "BaseEnemy_new_variables": {
      "lines": "61-64",
      "added": [
        "force_direct_movement: bool = false",
        "force_direct_movement_timer: float = 0.0",
        "force_direct_movement_duration: float = 3.0"
      ]
    },
    "BaseEnemy_physics_process": {
      "line": 127,
      "added": "_update_force_direct_movement_timer(delta) call"
    },
    "BaseEnemy_timer_function": {
      "lines": "152-158",
      "added": "_update_force_direct_movement_timer() function"
    },
    "BaseEnemy_behavior": {
      "line": 172,
      "changed": "Added 'or force_direct_movement' condition"
    },
    "BaseEnemy_teleport": {
      "lines": "477-485",
      "changed": [
        "Set force_direct_movement = true",
        "Set timer = 3.0s",
        "Changed delay to spawn delay (0.1s)"
      ]
    }
  },

  "gameplay_impact": {
    "before_teleport": {
      "all_enemies": "Use appropriate movement (navigation or direct)",
      "pathfinding": "Full obstacle avoidance and climbing"
    },
    "after_teleport_old": {
      "navigation_enemies": "Jitter, broken movement, terrible UX",
      "direct_enemies": "Perfect smooth movement"
    },
    "after_teleport_new": {
      "all_enemies": "Use direct movement for 3 seconds (smooth)",
      "pathfinding": "None for 3s (walk straight at player)",
      "then": "Switch back to normal behavior after 3s"
    },
    "user_perception": "Brief pause (0.1s), smooth chase for 3s, then normal pathfinding resumes"
  },

  "files_modified": [
    {
      "file": "megabonk-mobile/scripts/enemies/BaseEnemy.gd",
      "changes": [
        "Lines 61-64: Added force_direct_movement variables",
        "Line 127: Added timer update call in _physics_process",
        "Lines 152-158: Added _update_force_direct_movement_timer() function",
        "Line 172: Modified condition to check force_direct_movement flag",
        "Lines 477-485: Set flag and timer in _teleport_near_player()"
      ]
    }
  ],

  "verification_steps": {
    "test_1_basic_teleport": "Run from BasicEnemy (red), wait for teleport, verify smooth movement",
    "test_2_tank_teleport": "Run from TankEnemy (purple), wait for teleport, verify smooth movement",
    "test_3_ranged_unchanged": "Verify RangedEnemy (green) still works perfectly",
    "test_4_fast": "Run from FastEnemy (yellow) if possible, verify smooth teleport",
    "test_5_multiple_teleports": "Trigger multiple teleports, verify consistent smooth behavior",
    "expected": "All enemies pause 0.1s after teleport, then move smoothly toward player (no jitter)"
  },

  "acceptance_criteria": [
    "✅ Added force_direct_movement flag and timer",
    "✅ Timer counts down in _physics_process",
    "✅ _process_enemy_behavior checks flag and uses direct movement when forced",
    "✅ Teleport sets flag for 3 seconds",
    "✅ Uses spawn delay (0.1s) not teleport delay (0.5s) after teleport",
    "⏳ User confirms BasicEnemy (red) smooth after teleport (pending)",
    "⏳ User confirms TankEnemy (purple) smooth after teleport (pending)",
    "⏳ User confirms no jitter for any enemy type (pending)"
  ],

  "lessons_learned": {
    "lesson_1": "Sometimes you can't fix a broken system - you have to bypass it entirely",
    "lesson_2": "If one approach works (direct movement) and another doesn't (navigation), use what works",
    "lesson_3": "NavigationAgent3D not robust to teleportation in Godot 4",
    "lesson_4": "Temporary workarounds (3s direct movement) are valid if they solve the problem",
    "lesson_5": "User feedback 'still the same issue' means the approach is fundamentally wrong",
    "lesson_6": "Don't keep trying variations of broken approach - try completely different solution"
  },

  "why_this_will_work": {
    "empirical_evidence": "RangedEnemy uses direct movement, works perfectly - proven solution",
    "bypasses_problem": "Doesn't try to fix NavigationAgent3D, avoids it entirely",
    "simple_and_robust": "No complex timing, state management, or path recalculation",
    "fallback_proven": "Direct movement already used for FastEnemy (move_speed >= 4.0), works fine"
  },

  "related_tasks": [
    "TASK-018: Standardized movement (foundation for this fix)",
    "TASK-019: Updated nav target after teleport (didn't fix jitter)",
    "TASK-020: Increased delay to 0.5s (didn't fix jitter)",
    "All previous attempts failed - this is the nuclear option"
  ]
}
