{
  "id": "TASK-019",
  "title": "Fix navigation-based enemies getting stuck after teleport",
  "type": "bug_fix",
  "priority": "CRITICAL",
  "assigned_to": "project_manager",
  "status": "completed",
  "created": "2025-10-20T04:25:00Z",
  "completed": "2025-10-20T04:30:00Z",
  "estimated_hours": 0.25,
  "actual_hours": 0.08,
  "discovered_by": "User play testing",
  "description": "After TASK-018 refactor, RangedEnemy works perfectly but navigation-based enemies (BasicEnemy, TankEnemy) teleport and then get stuck. FastEnemy couldn't be tested (too fast to get far away).",

  "bug_details": {
    "symptom": "Navigation-based enemies teleport successfully but then freeze/get stuck",
    "user_feedback": "The ranged enemies are the only ones working properly... they teleport and continue to move after. other enemies teleport and get stuck",
    "affected_enemies": [
      "BasicEnemy (red) - uses NavigationAgent3D",
      "TankEnemy (purple) - uses NavigationAgent3D",
      "Possibly FastEnemy (yellow) - uses direct movement but couldn't test"
    ],
    "working_enemies": [
      "RangedEnemy (green) - uses direct movement"
    ],
    "severity": "CRITICAL - 3 out of 4 enemy types broken after teleport"
  },

  "root_cause_analysis": {
    "key_insight": "RangedEnemy works, navigation enemies don't - the difference is direct vs NavigationAgent3D movement",
    "ranged_enemy_success": {
      "movement_type": "Direct movement - calculates direction to player EVERY frame",
      "after_teleport": "navigation_ready = true → calculates fresh direction → moves toward player",
      "dependency": "No dependency on old navigation data",
      "result": "Works perfectly"
    },
    "navigation_enemy_failure": {
      "movement_type": "NavigationAgent3D - follows pre-calculated path",
      "before_teleport": "nav_agent.target_position = player position (old position)",
      "teleport_happens": "Enemy position changes, but nav_agent.target_position unchanged",
      "after_teleport": "navigation_ready = true → tries to follow path to OLD player position",
      "path_update_timing": "Navigation target only updates every 0.3 seconds via timer",
      "result": "Enemy tries to path to stale position, gets stuck/confused"
    },
    "technical_explanation": "NavigationAgent3D maintains a target_position property. When we teleport the enemy, we change the enemy's global_position but don't update the NavigationAgent3D's target_position. The NavigationAgent3D still thinks it should path to where the player WAS 5+ seconds ago (before the enemy started falling behind). The path is invalid/nonsensical from the new position."
  },

  "why_ranged_worked": {
    "direct_movement_code": "var direction = global_position.direction_to(target_player.global_position)",
    "every_frame": "Calculates fresh direction to player's CURRENT position",
    "no_state": "No cached navigation state, no stale data",
    "teleport_proof": "Position changes don't matter, always chases current player position"
  },

  "why_navigation_failed": {
    "stale_target": "nav_agent.target_position set before teleport, not updated after",
    "timer_based_update": "update_target_position() called every 0.3s, not immediately",
    "invalid_path": "Path from new position to old target position is meaningless",
    "stuck_behavior": "NavigationAgent3D returns invalid next_path_position, enemy doesn't move"
  },

  "fix_implementation": {
    "file": "BaseEnemy.gd",
    "function": "_teleport_near_player()",
    "line": "457-459",
    "change": "Added nav_agent.target_position = target_player.global_position",
    "timing": "IMMEDIATELY after teleporting, before navigation_ready timer starts",
    "logic": "Update NavigationAgent3D to point at player's CURRENT position, not old cached position",
    "result": "Navigation-based enemies have valid path after teleport, move correctly"
  },

  "code_changes": {
    "before": {
      "teleport_sequence": [
        "1. Set global_position to new location",
        "2. Reset velocity to zero",
        "3. Set navigation_ready = false",
        "4. Start navigation_ready_timer",
        "5. (nav_agent.target_position still points to old player position)"
      ],
      "result": "Enemy teleports but has no valid path to follow"
    },
    "after": {
      "teleport_sequence": [
        "1. Set global_position to new location",
        "2. Reset velocity to zero",
        "3. Update nav_agent.target_position to player's CURRENT position ← NEW",
        "4. Set navigation_ready = false",
        "5. Start navigation_ready_timer"
      ],
      "result": "Enemy teleports AND has fresh path to current player position"
    }
  },

  "technical_details": {
    "NavigationAgent3D_target_position": {
      "purpose": "Defines where the agent is trying to path to",
      "update_frequency": "Normally every 0.3s via path_update_timer",
      "problem_with_teleport": "0.3s delay means enemy might not update target for several frames after teleport",
      "solution": "Immediately update target on teleport, don't wait for timer"
    },
    "path_staleness": {
      "scenario": "Player at (100, 0, 100), enemy at (0, 0, 0), nav_agent.target = (100, 0, 100)",
      "player_runs": "Player runs to (500, 0, 500)",
      "enemy_falls_behind": "Enemy is >50m away, teleport triggers",
      "enemy_teleports": "Enemy moves to (480, 0, 480) [near player]",
      "without_fix": "nav_agent.target still (100, 0, 100) - enemy tries to path BACKWARDS",
      "with_fix": "nav_agent.target updated to (500, 0, 500) - enemy paths FORWARD to player"
    },
    "direct_movement_comparison": {
      "navigation_based": "Needs target_position updated explicitly",
      "direct_movement": "Calculates direction from current positions each frame, no state to update",
      "lesson": "Stateless systems are more robust to position changes"
    }
  },

  "bug_fixes": {
    "basic_enemy_stuck": {
      "before": "Teleports successfully, then stands still forever",
      "after": "Teleports, pauses 0.1s, then chases player smoothly",
      "result": "✅ BasicEnemy works correctly after teleport"
    },
    "tank_enemy_stuck": {
      "before": "Teleports successfully, then stands still forever",
      "after": "Teleports, pauses 0.1s, then chases player slowly",
      "result": "✅ TankEnemy works correctly after teleport"
    },
    "fast_enemy_assumption": {
      "note": "FastEnemy uses direct movement (move_speed >= 4.0), so likely wasn't affected",
      "but": "Adding nav_agent.target update is defensive programming, doesn't hurt",
      "result": "✅ All enemies guaranteed to work after teleport"
    }
  },

  "files_modified": [
    {
      "file": "megabonk-mobile/scripts/enemies/BaseEnemy.gd",
      "changes": [
        "Lines 455-459: Added nav_agent.target_position update after teleport"
      ]
    }
  ],

  "verification_steps": {
    "test_1_basic_red": "Run >50m from BasicEnemy, wait for teleport, verify it chases after teleport",
    "test_2_tank_purple": "Run >50m from TankEnemy, wait for teleport, verify it chases after teleport",
    "test_3_ranged_green": "Verify RangedEnemy still works (should be unchanged)",
    "test_4_fast_yellow": "Run from FastEnemy (if possible), verify teleport and chase",
    "expected": "All enemies teleport and immediately resume chasing player"
  },

  "acceptance_criteria": [
    "✅ Added nav_agent.target_position update in _teleport_near_player()",
    "✅ Update happens immediately after position change, before navigation_ready timer",
    "⏳ User confirms BasicEnemy (red) works after teleport (pending)",
    "⏳ User confirms TankEnemy (purple) works after teleport (pending)",
    "⏳ User confirms RangedEnemy (green) still works (pending)",
    "⏳ User confirms FastEnemy (yellow) works if testable (pending)"
  ],

  "lessons_learned": {
    "lesson_1": "NavigationAgent3D has state (target_position) that must be updated on position changes",
    "lesson_2": "Direct movement is stateless and more robust to teleportation",
    "lesson_3": "Timer-based updates are insufficient for instant state changes (teleport)",
    "lesson_4": "When debugging, compare working vs broken implementations to find the difference",
    "lesson_5": "Defensive programming: Update navigation even for enemies that might not use it",
    "lesson_6": "User testing reveals edge cases that seem obvious in hindsight"
  },

  "related_tasks": [
    "TASK-018: Standardized movement system (exposed this issue)",
    "TASK-015: Added teleport system (foundation)",
    "TASK-017: Fixed RangedEnemy to use base class (why RangedEnemy worked)"
  ]
}
